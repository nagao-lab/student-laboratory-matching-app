scalar Time

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MatchStatus {
  ACTIVE
  INACTIVE
}

enum LikeStatus {
	BLANK
	LIKE_FROM_STUDENT
	LIKE_FROM_LABORATORY
	LIKE_FROM_BOTH
}

enum MessageFrom {
	STUDNET
	LABORATORY
}

type Student {
	id: ID!
	uid: String!
	name: String!
	email: String!
	password: String!
	imageUrl: String!
	gender: Gender!
	birthday: Time
	university: University!
	grade: Int!
	gpa: Float!
	prefecture: Prefecture!
	comment: String!
	interest: String!
	status: MatchStatus!
	majors: [Major!]!
	numLikes: Int!
}

type Laboratory {
	id: ID!
	uid: String!
	university: University!
	name: String!
	professor: String!
	numStudents: Int!
	comment: String!
	status: MatchStatus!
	imageUrl: String!
	laboratoryUrl: String!
	email: String!
	password: String!
	majors: [Major!]!
	numLikes: Int!
}

type StudentLaboratory {
	id: ID!
	student: Student!
	laboratory: Laboratory!
	status: LikeStatus!
}

type Major {
  id: ID!
  name: String!
}

type Prefecture {
  id: ID!
  name: String!
}

type University {
  id: ID!
  prefecture: Prefecture!
  name: String!
  address: String!
  maxGpa: Float!
}

type Message {
	messageId: ID! # id
	messageRoomId: ID! # student_laboratory_id
	from: MessageFrom!
	content: String!
	createdAt: Time!
	updatedAt: Time!
}

type Query {
  student(id: ID!): Student!
  getMatchableStudents(id: ID!): [Student]
  laboratory(id: ID!): Laboratory!
  getMatchableLaboratories(id: ID!): [Laboratory]
  getAllMajors: [Major]
  getAllPrefectures: [Prefecture]
  getAllUniversities: [University]
  getLikeStatus(input: NewLike!): LikeStatus!
  getMessages(messageRoomId: ID!): [Message]
  getMessagesByIds(input: NewLike!): [Message]
  getStudentLaboratoriesByStudentId(id: ID, filter: LikeStatus): [StudentLaboratory]
  getStudentLaboratoriesByLaboratoryId(id: ID, filter: LikeStatus): [StudentLaboratory]
}

input NewStudent {
  email: String!
  password: String!
}

input NewLaboratory {
	email: String!
	password: String!
}

input NewStudentFields {
	id: ID!
	name: String
	email: String
	password: String
	imageUrl: String
	gender: Gender
	universityId: ID
	grade: Int
	gpa: Float
	prefectureId: ID
	comment: String
	interest: String
	status: MatchStatus
	majorIds: [ID]
}

input NewLaboratoryFields {
	id: ID!
	universityId: ID
	name: String
	professor: String
	numStudents: Int
	comment: String
	status: MatchStatus
	imageUrl: String
	laboratoryUrl: String
	email: String
	password: String
	majorIds: [ID]
}

input NewUniversity {
	prefectureId: ID!
	name: String!
	address: String!
	maxGpa: Float!
}

input NewLike { # TODO: rename
	studentId: ID!
	laboratoryId: ID!
}

input NewMessage {
	messageRoomId: ID! # student_laboratory_id
	from: MessageFrom!
	content: String!
}

type Mutation {
  signupStudent(input: NewStudent!): Student!
  signupLaboratory(input: NewLaboratory!): Laboratory!
  loginStudent(email: String!, password: String!): Student!
  loginLaboratory(email: String!, password: String!): Laboratory!
  logoutStudent: Boolean!
  logoutLaboratory: Boolean!
  deleteStudent(id: ID!): Boolean!
  favoriteLaboratory(input: NewLike!): LikeStatus!
  favoriteStudent(input: NewLike!): LikeStatus!
  unfavoriteLaboratory(input: NewLike!): LikeStatus!
  unfavoriteStudent(input: NewLike!): LikeStatus!
  updateStudent(input: NewStudentFields!): Student!
  updateLaboratory(input: NewLaboratoryFields!): Laboratory!
  createMajor(name: String!): Major!
  createUniversity(input: NewUniversity!): University!
  createMessage(input: NewMessage!): Message
}
